---
import { supa } from "../lib/supabase";

// Get upcoming spotlight matchups (Semi Finals, Finals, Grand Finals)
// Show matches from today onwards (same day and future)
// Use start of today in local timezone for filtering timestamptz fields
const today = new Date();
today.setHours(0, 0, 0, 0); // Start of today in local timezone

const { data: upcomingSpotlightMatches, error } = await supa((Astro.locals as any).runtime)
  .from("upcoming_matches")
  .select(`
    id,
    scheduled_at,
    stage,
    team_a_id,
    team_b_id,
    tournament_id,
    league_id,
    season_id
  `)
  .in("stage", ["Semi Finals", "Finals", "Grand Finals"])
  .gte("scheduled_at", today.toISOString())
  .order("scheduled_at", { ascending: true })
  .limit(5); // Show up to 5 upcoming spotlight matches

let matchupsWithData: any[] = [];

if (upcomingSpotlightMatches && upcomingSpotlightMatches.length > 0 && !error) {
  // Get all unique team IDs from all matches
  const allTeamIds = Array.from(new Set([
    ...upcomingSpotlightMatches.map((m: any) => m.team_a_id).filter(Boolean),
    ...upcomingSpotlightMatches.map((m: any) => m.team_b_id).filter(Boolean)
  ]));

  // Get all unique tournament IDs
  const allTournamentIds = Array.from(new Set(
    upcomingSpotlightMatches.map((m: any) => m.tournament_id).filter(Boolean)
  ));

  // Fetch all team data in one query
  const { data: teamsData } = allTeamIds.length > 0 ? await supa((Astro.locals as any).runtime)
    .from("teams")
    .select("id, name, logo_url")
    .in("id", allTeamIds) : { data: [] };

  // Fetch all tournament data in one query
  const { data: tournamentsData } = allTournamentIds.length > 0 ? await supa((Astro.locals as any).runtime)
    .from("tournaments")
    .select("id, name")
    .in("id", allTournamentIds) : { data: [] };

  // Create lookup maps
  const teamMap = new Map((teamsData || []).map((t: any) => [t.id, t]));
  const tournamentMap = new Map((tournamentsData || []).map((t: any) => [t.id, t]));

  // Build matchups with team and tournament info
  matchupsWithData = upcomingSpotlightMatches.map((match: any) => ({
    ...match,
    teamAInfo: teamMap.get(match.team_a_id),
    teamBInfo: teamMap.get(match.team_b_id),
    tournamentInfo: match.tournament_id ? tournamentMap.get(match.tournament_id) : null
  })).filter((match: any) => match.teamAInfo && match.teamBInfo); // Only include matches with valid team data
}

const formatDate = (dateString: string) => {
  // Parse the date string from the database
  const parsedDate = new Date(dateString);
  
  // Based on your feedback, we're seeing 9 PM and 11 PM when it should be 5 PM and 7 PM
  // This is exactly a 4-hour difference, suggesting the times are being interpreted as UTC
  // when they should be in local time. Let's subtract 4 hours to correct this.
  const date = new Date(parsedDate.getTime() - (4 * 60 * 60 * 1000));
  
  const now = new Date();
  
  // Get today's date in local timezone for comparison
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  // Get the match date in local timezone for comparison
  const matchDate = new Date(date);
  matchDate.setHours(0, 0, 0, 0);
  
  // Check if the match is today
  const isToday = matchDate.getTime() === today.getTime();
  
  // Calculate hours difference for same day logic
  const diffInHours = Math.floor((date.getTime() - now.getTime()) / (1000 * 60 * 60));
  
  if (isToday) {
    return `Today ${date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    })}`;
  } else if (diffInHours < 24 && diffInHours > 0) {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  } else {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  }
};
---

{matchupsWithData.length > 0 && (
  <div class="mb-6">
    <div class="flex items-center gap-2 mb-4">
      <svg class="w-6 h-6 text-purple-400" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
      </svg>
      <h2 class="text-lg font-bold text-purple-300">Upcoming Spotlight Matchups</h2>
      <span class="text-sm text-neutral-400">({matchupsWithData.length})</span>
    </div>
    
    <div class="space-y-3">
      {matchupsWithData.map((matchup: any) => (
        <div class="p-4 bg-gradient-to-r from-purple-900/20 to-blue-900/20 border border-purple-500/30 rounded-lg">
          <div class="flex flex-col sm:flex-row items-center gap-4">
            <div class="flex items-center gap-3 flex-1">
              <div class="flex items-center gap-2">
                <span class="text-sm font-semibold text-purple-300">{matchup.stage}</span>
                {matchup.tournamentInfo && (
                  <>
                    <span class="text-neutral-500">•</span>
                    <span class="text-sm text-neutral-300">{matchup.tournamentInfo.name}</span>
                  </>
                )}
              </div>
            </div>
            
            <div class="flex items-center gap-3">
              {/* Team A */}
              <div class="flex items-center gap-2">
                {matchup.teamAInfo.logo_url ? (
                  <img src={matchup.teamAInfo.logo_url} alt={`${matchup.teamAInfo.name} logo`} class="h-8 w-8 rounded object-cover" />
                ) : (
                  <div class="h-8 w-8 rounded bg-neutral-700 flex items-center justify-center text-neutral-500 text-xs font-bold">
                    {matchup.teamAInfo.name.substring(0, 2).toUpperCase()}
                  </div>
                )}
                <span class="font-semibold text-white">{matchup.teamAInfo.name}</span>
              </div>
              
              <span class="text-neutral-400 font-bold">VS</span>
              
              {/* Team B */}
              <div class="flex items-center gap-2">
                <span class="font-semibold text-white">{matchup.teamBInfo.name}</span>
                {matchup.teamBInfo.logo_url ? (
                  <img src={matchup.teamBInfo.logo_url} alt={`${matchup.teamBInfo.name} logo`} class="h-8 w-8 rounded object-cover" />
                ) : (
                  <div class="h-8 w-8 rounded bg-neutral-700 flex items-center justify-center text-neutral-500 text-xs font-bold">
                    {matchup.teamBInfo.name.substring(0, 2).toUpperCase()}
                  </div>
                )}
              </div>
            </div>
            
            <div class="flex flex-col sm:flex-row items-center gap-2">
              <div class="text-sm text-neutral-400">
                {formatDate(matchup.scheduled_at)}
              </div>
              <a 
                href={`/matchups/${matchup.id}`}
                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded-lg transition-colors text-sm"
              >
                View Details
              </a>
            </div>
          </div>
          
          {/* Mobile tournament info */}
          {matchup.tournamentInfo && (
            <div class="sm:hidden mt-3 pt-3 border-t border-neutral-700">
              <div class="text-sm text-neutral-300 text-center">
                {matchup.stage} • {matchup.tournamentInfo.name}
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
)}
