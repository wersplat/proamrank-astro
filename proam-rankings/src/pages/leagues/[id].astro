---
import Navigation from "../../components/Navigation.astro";
import LeagueTabsIsland from "../../components/LeagueTabsIsland";
import { supa } from "../../lib/supabase";
import "../../styles/global.css";

// Enable SSR for dynamic league pages
export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/leagues");
}

// Get league season info from league_calendar view
// ID is the season_id
const { data: leagueData } = await supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("league_id, league_name, league_logo, season_id, season_number, start_date, end_date, is_active, game_year")
  .eq("season_id", id)
  .maybeSingle();

// Use id directly as season_id
const seasonId = id;

// Load entry fee and prize pool from league_seasons table if we have a season_id
let entryFee: number | null = null;
let prizePool: number | null = null;
if (seasonId) {
  const { data: seasonData } = await supa((Astro.locals as any).runtime)
    .from("league_seasons")
    .select("entry_fee, prize_pool")
    .eq("id", seasonId)
    .maybeSingle();
  
  if (seasonData) {
    entryFee = seasonData.entry_fee;
    prizePool = seasonData.prize_pool;
  }
}

// Get additional league info if we have a league_id
let leagueInfo: any = null;
if (leagueData?.league_id) {
  const { data: info } = await supa((Astro.locals as any).runtime)
    .from("leagues_info")
    .select("id, league, lg_logo_url, lg_url, lg_discord, twitch_url, twitter_id")
    .eq("id", leagueData.league_id)
    .maybeSingle();
  leagueInfo = info;
}

// Get league results/standings for this season (no limit - show all teams)
const { data: standings } = await supa((Astro.locals as any).runtime)
  .from("league_results")
  .select("*")
  .eq("season_id", seasonId)
  .order("wins", { ascending: false });

// Fetch teams data separately and merge with standings
let teamsWithData = standings ?? [];
if (standings && standings.length > 0) {
  const teamIds = standings.map((s: any) => s.team_id).filter(Boolean);
  if (teamIds.length > 0) {
    const { data: teamsData } = await supa((Astro.locals as any).runtime)
      .from("teams")
      .select("id, global_rank, hybrid_score, leaderboard_tier")
      .in("id", teamIds);
    
    // Merge teams data with standings
    teamsWithData = standings.map((standing: any) => {
      const teamData = teamsData?.find((t: any) => t.id === standing.team_id);
      return {
        ...standing,
        teams: teamData
      };
    });
  }
}

// Get matches for this season (paginated in tabs, showing up to 100 matches)
// Use primary_season_id to include matches added via match_contexts
const { data: matchesData } = await supa((Astro.locals as any).runtime)
  .from("v_matches_with_primary_context")
  .select("id, played_at, team_a_id, team_b_id, score_a, score_b, stage, boxscore_url, status, verified, league_id, season_id, tournament_id, primary_season_id")
  .eq("primary_season_id", seasonId)
  .order("played_at", { ascending: false })
  .limit(1000);

// Get the last match update time for the notice
const lastMatchUpdate = matchesData && matchesData.length > 0 ? matchesData[0].played_at : null;

// Get team names separately
const teamIds = Array.from(new Set([
  ...(matchesData ?? []).map((m: any) => m.team_a_id),
  ...(matchesData ?? []).map((m: any) => m.team_b_id)
].filter(Boolean)));

const { data: teamsData } = teamIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("teams")
  .select("id, name, logo_url")
  .in("id", teamIds) : { data: [] };

const teamMap = new Map((teamsData ?? []).map((t: any) => [t.id, t]));

// Get league info (use season_id for accurate season lookup)
const matchSeasonIds = Array.from(new Set((matchesData ?? []).map((m: any) => m.season_id).filter(Boolean)));
const { data: matchLeaguesData } = matchSeasonIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("season_id, league_id, league_name, season_number")
  .in("season_id", matchSeasonIds) : { data: [] };

const matchLeagueMap = new Map((matchLeaguesData ?? []).map((l: any) => [l.season_id, l]));

// Combine match data with team info
const matches = (matchesData ?? []).map((m: any) => ({
  ...m,
  team_a: teamMap.get(m.team_a_id),
  team_b: teamMap.get(m.team_b_id),
  league: matchLeagueMap.get(m.season_id),
}));

// Get player statistics from pre-calculated view
const { data: playerStats } = await supa((Astro.locals as any).runtime)
  .from("player_stats_by_league_season")
  .select("player_gamertag, avg_points, avg_assists, avg_rebounds, avg_steals, avg_blocks, games_played")
  .eq("league_season_id", seasonId)
  .gte("games_played", 3);

const topScorers = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_points - a.avg_points)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.player_gamertag,
    points_per_game: p.avg_points,
    games_played: p.games_played
  }));

const topAssists = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_assists - a.avg_assists)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.player_gamertag,
    assists_per_game: p.avg_assists,
    games_played: p.games_played
  }));

const topRebounders = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_rebounds - a.avg_rebounds)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.player_gamertag,
    rebounds_per_game: p.avg_rebounds,
    games_played: p.games_played
  }));

const topSteals = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_steals - a.avg_steals)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.player_gamertag,
    steals_per_game: p.avg_steals,
    games_played: p.games_played
  }));

const topBlocks = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_blocks - a.avg_blocks)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.player_gamertag,
    blocks_per_game: p.avg_blocks,
    games_played: p.games_played
  }));

// Get full player statistics for league statistics tab
const { data: fullPlayerStats } = await supa((Astro.locals as any).runtime)
  .from("player_stats_by_league_season")
  .select("*")
  .eq("league_season_id", seasonId)
  .gte("games_played", 1)
  .order("avg_points", { ascending: false });

const league = leagueData;
const teamStandings = teamsWithData ?? [];
const recentMatches = matches ?? [];

if (!league) {
  return Astro.redirect("/leagues");
}

// Prepare league info object for tabs
const leagueInfoForTabs = {
  league_name: league.league_name,
  season_number: league.season_number,
  game_year: league.game_year,
  start_date: league.start_date,
  end_date: league.end_date,
  is_active: league.is_active,
  entry_fee: entryFee,
  prize_pool: prizePool,
  lg_url: leagueInfo?.lg_url,
  lg_discord: leagueInfo?.lg_discord,
  twitch_url: leagueInfo?.twitch_url,
  twitter_id: leagueInfo?.twitter_id,
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{league.league_name} - Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <!-- League Header -->
      <div class="mb-8 flex items-start gap-6">
        {league.league_logo && (
          <img 
            src={league.league_logo}
            alt={league.league_name || "League"}
            class="h-24 w-24 rounded-lg"
          />
        )}
        <div class="flex-1">
          <h1 class="text-3xl font-bold mb-2">{league.league_name}</h1>
          <div class="flex flex-wrap gap-4 text-sm mb-3">
            <div>
              <span class="text-neutral-400">Season:</span>
              <span class="ml-2 font-semibold">{league.season_number ?? '-'}</span>
            </div>
            <div>
              <span class="text-neutral-400">Year:</span>
              <span class="ml-2 font-semibold">{league.game_year ?? '-'}</span>
            </div>
            {entryFee && (
              <div>
                <span class="text-neutral-400">Entry Fee:</span>
                <span class="ml-2 font-semibold">${entryFee}</span>
              </div>
            )}
            {prizePool && (
              <div>
                <span class="text-neutral-400">Prize Pool:</span>
                <span class="ml-2 font-semibold text-green-400">${prizePool}</span>
              </div>
            )}
            {league.is_active && (
              <span class="px-2 py-1 rounded text-xs font-bold bg-green-900 text-green-300">Active</span>
            )}
          </div>
          {leagueInfo && (
            <div class="flex flex-wrap gap-2 text-sm">
              {leagueInfo.lg_url && (
                <a href={leagueInfo.lg_url} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-neutral-800 hover:bg-neutral-700 transition">
                  üåê Website
                </a>
              )}
              {leagueInfo.lg_discord && (
                <a href={leagueInfo.lg_discord} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-indigo-900 hover:bg-indigo-800 transition">
                  üí¨ Discord
                </a>
              )}
              {leagueInfo.twitch_url && (
                <a href={leagueInfo.twitch_url} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-purple-900 hover:bg-purple-800 transition">
                  üì∫ Twitch
                </a>
              )}
              {leagueInfo.twitter_id && (
                <a href={`https://twitter.com/${leagueInfo.twitter_id}`} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-sky-900 hover:bg-sky-800 transition">
                  üê¶ Twitter
                </a>
              )}
            </div>
          )}
        </div>
      </div>

      <!-- Last Updated Notice -->
      {lastMatchUpdate && (
        <div class="mb-4 p-3 rounded-lg border border-neutral-700 bg-neutral-800/50">
          <div class="flex items-center gap-2 text-sm text-neutral-300">
            <svg class="w-4 h-4 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>
              Last match: <span class="font-medium text-white">{new Date(lastMatchUpdate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}</span>
            </span>
          </div>
        </div>
      )}

      <!-- Verification Info Notice -->
      <div class="mb-6 p-4 rounded-lg border border-blue-500/30 bg-blue-900/10">
        <div class="flex items-start gap-3">
          <svg class="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
          </svg>
          <div class="flex-1">
            <h3 class="text-sm font-semibold text-blue-300 mb-1">About Match Verification</h3>
            <p class="text-sm text-neutral-300">
              Unless a match has the <span class="text-green-300 font-medium">Verified</span> badge, stats were derived from OCR (Optical Character Recognition) and may contain errors. 
              Only verified stats are entered into our statistics tables and affect player ratings. 
              <a href="/ranking-system#verification" class="text-blue-400 hover:text-blue-300 underline">Learn more</a>
            </p>
          </div>
        </div>
      </div>

      <!-- League Tabs -->
      <LeagueTabsIsland 
        client:load
        standings={teamStandings as any}
        matches={recentMatches as any}
        topScorers={topScorers as any}
        topAssists={topAssists as any}
        topRebounders={topRebounders as any}
        topSteals={topSteals as any}
        topBlocks={topBlocks as any}
        leagueInfo={leagueInfoForTabs as any}
        playerStats={fullPlayerStats as any}
      />
    </main>
  </body>
</html>

