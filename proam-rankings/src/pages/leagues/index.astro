---
import Navigation from "../../components/Navigation.astro";
import { supa } from "../../lib/supabase";
import "../../styles/global.css";
import { buildFilterQuery, hasActiveFilters } from "../../lib/filterUtils";

const ITEMS_PER_PAGE = 30;
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1', 10);
const offset = (currentPage - 1) * ITEMS_PER_PAGE;

// Get filter parameter
const gameYearFilter = Astro.url.searchParams.get('year') || 'all';
const statusFilter = Astro.url.searchParams.get('status') || 'all';
const searchQuery = Astro.url.searchParams.get('search') || '';

// Build query with filters
let query = supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("*", { count: 'exact' });

if (gameYearFilter !== 'all') {
  query = query.eq("game_year", gameYearFilter as any);
}

if (statusFilter === 'active') {
  query = query.eq("is_active", true);
} else if (statusFilter === 'inactive') {
  query = query.eq("is_active", false);
}

if (searchQuery) {
  query = query.ilike("league_name", `%${searchQuery}%`);
}

// Get total count
const { count } = await query;

const totalPages = Math.ceil((count || 0) / ITEMS_PER_PAGE);

// Fetch leagues with pagination and filters
let dataQuery = supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("*");

if (gameYearFilter !== 'all') {
  dataQuery = dataQuery.eq("game_year", gameYearFilter as any);
}

if (statusFilter === 'active') {
  dataQuery = dataQuery.eq("is_active", true);
} else if (statusFilter === 'inactive') {
  dataQuery = dataQuery.eq("is_active", false);
}

if (searchQuery) {
  dataQuery = dataQuery.ilike("league_name", `%${searchQuery}%`);
}

const { data, error } = await dataQuery
  .order("is_active", { ascending: false })
  .order("start_date", { ascending: false })
  .range(offset, offset + ITEMS_PER_PAGE - 1);

if (error) console.error(error);
const leagues = data ?? [];

// Get available game years for filter
const { data: gameYears } = await supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("game_year")
  .not("game_year", "is", null)
  .order("game_year", { ascending: false });

const uniqueGameYears = [...new Set((gameYears ?? []).map((y: any) => y.game_year))].filter(Boolean);

// Generate page numbers
function getPageNumbers(current: number, total: number): number[] {
  const pages: number[] = [];
  if (total <= 7) {
    for (let i = 1; i <= total; i++) pages.push(i);
  } else if (current <= 4) {
    for (let i = 1; i <= 7; i++) pages.push(i);
  } else if (current >= total - 3) {
    for (let i = total - 6; i <= total; i++) pages.push(i);
  } else {
    for (let i = current - 3; i <= current + 3; i++) pages.push(i);
  }
  return pages;
}

const pageNumbers = getPageNumbers(currentPage, totalPages);

// Build filter query for pagination links
const filterQuery = buildFilterQuery({
  year: gameYearFilter,
  status: statusFilter,
  search: searchQuery
});

// Check if filters are active
const filtersActive = hasActiveFilters(
  { year: gameYearFilter, status: statusFilter, search: searchQuery },
  { year: 'all', status: 'all', search: '' }
);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Leagues - Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <div class="mb-6">
        <div class="flex items-center justify-between mb-4">
          <h1 class="text-2xl font-bold">Leagues</h1>
          <div class="text-sm text-neutral-400">
            Page {currentPage} of {totalPages} • {count || 0} total
          </div>
        </div>

        <!-- Filters -->
        <div class="flex flex-wrap gap-3 mb-4">
          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Search:</label>
            <input
              type="text"
              id="searchInput"
              placeholder="League name..."
              value={searchQuery}
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm w-48"
              onkeydown="if (event.key === 'Enter') window.location.href = updateFilter('search', this.value)"
            />
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Year:</label>
            <select 
              id="yearFilter"
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm"
              onchange="window.location.href = updateFilter('year', this.value)"
            >
              <option value="all" selected={gameYearFilter === 'all'}>All Years</option>
              {uniqueGameYears.map((year: string) => (
                <option value={year} selected={gameYearFilter === year}>{year}</option>
              ))}
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Status:</label>
            <select 
              id="statusFilter"
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm"
              onchange="window.location.href = updateFilter('status', this.value)"
            >
              <option value="all" selected={statusFilter === 'all'}>All</option>
              <option value="active" selected={statusFilter === 'active'}>Active</option>
              <option value="inactive" selected={statusFilter === 'inactive'}>Inactive</option>
            </select>
          </div>

          {filtersActive && (
            <a 
              href="/leagues" 
              class="px-3 py-1 rounded bg-neutral-800 hover:bg-neutral-700 transition text-sm"
            >
              Clear Filters
            </a>
          )}
        </div>
      </div>

      <script is:inline>
        function updateFilter(param, value) {
          const url = new URL(window.location.href);
          if (value === 'all' || (param === 'search' && value === '')) {
            url.searchParams.delete(param);
          } else {
            url.searchParams.set(param, value);
          }
          url.searchParams.delete('page'); // Reset to page 1 when filtering
          return url.toString();
        }
      </script>

      <!-- Leagues Grid -->
      <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {leagues.map((league: any) => (
          <a 
            href={`/leagues/${league.season_id}`}
            class="block rounded-lg border border-neutral-800 p-4 hover:border-blue-500 transition"
          >
            <div class="flex items-center gap-3 mb-3">
              {league.league_logo && (
                <img 
                  src={league.league_logo}
                  alt={league.league_name || "League"}
                  class="h-12 w-12 rounded"
                  loading="lazy"
                />
              )}
              <div class="flex-1 min-w-0">
                <h2 class="font-bold text-lg truncate">{league.league_name}</h2>
                {league.is_active && (
                  <span class="px-2 py-0.5 rounded text-xs font-bold bg-green-900 text-green-300">Active</span>
                )}
              </div>
            </div>
            
            <dl class="grid grid-cols-2 gap-2 text-sm mb-2">
              <div>
                <dt class="text-neutral-400 text-xs">Season</dt>
                <dd class="font-semibold">{league.season_number ?? '-'}</dd>
              </div>
              <div>
                <dt class="text-neutral-400 text-xs">Year</dt>
                <dd class="font-semibold">{league.game_year ?? '-'}</dd>
              </div>
            </dl>

            {(league.start_date || league.end_date) && (
              <div class="text-xs text-neutral-400 mt-2 pt-2 border-t border-neutral-800">
                {league.start_date && (
                  <div>Start: {new Date(league.start_date).toLocaleDateString()}</div>
                )}
                {league.end_date && (
                  <div>End: {new Date(league.end_date).toLocaleDateString()}</div>
                )}
              </div>
            )}
          </a>
        ))}
      </div>

      {leagues.length === 0 && (
        <div class="text-center py-12 text-neutral-400">
          No leagues found.
        </div>
      )}

      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="mt-8 flex items-center justify-center gap-2">
          {currentPage > 1 ? (
            <a 
              href={`/leagues?page=${currentPage - 1}${filterQuery}`}
              class="px-4 py-2 rounded bg-neutral-800 hover:bg-neutral-700 transition"
            >
              ← Previous
            </a>
          ) : (
            <span class="px-4 py-2 rounded bg-neutral-900 text-neutral-600 cursor-not-allowed">
              ← Previous
            </span>
          )}

          <div class="flex gap-1">
            {pageNumbers.map((pageNum: number) => (
              <a
                href={`/leagues?page=${pageNum}${filterQuery}`}
                class={`px-3 py-2 rounded transition ${
                  pageNum === currentPage
                    ? 'bg-blue-600 text-white font-semibold'
                    : 'bg-neutral-800 hover:bg-neutral-700'
                }`}
              >
                {pageNum}
              </a>
            ))}
          </div>

          {currentPage < totalPages ? (
            <a 
              href={`/leagues?page=${currentPage + 1}${filterQuery}`}
              class="px-4 py-2 rounded bg-neutral-800 hover:bg-neutral-700 transition"
            >
              Next →
            </a>
          ) : (
            <span class="px-4 py-2 rounded bg-neutral-900 text-neutral-600 cursor-not-allowed">
              Next →
            </span>
          )}
        </div>
      )}
    </main>
  </body>
</html>

