---
import Navigation from "../../components/Navigation.astro";
import { supa } from "../../lib/supabase";
import "../../styles/global.css";

const ITEMS_PER_PAGE = 30;
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1', 10);
const offset = (currentPage - 1) * ITEMS_PER_PAGE;

// Get filter parameters
const positionFilter = Astro.url.searchParams.get('position') || 'all';
const tierFilter = Astro.url.searchParams.get('tier') || 'all';
const sortBy = Astro.url.searchParams.get('sort') || 'rank';

// Build query with filters
let query = supa((Astro.locals as any).runtime)
  .from("player_performance_view")
  .select("*", { count: 'exact' });

if (positionFilter !== 'all') {
  query = query.eq("position", positionFilter as any);
}

if (tierFilter !== 'all') {
  query = query.eq("salary_tier", tierFilter as any);
}

// Get total count
const { count } = await query;

const totalPages = Math.ceil((count || 0) / ITEMS_PER_PAGE);

// Fetch players with pagination and filters
let dataQuery = supa((Astro.locals as any).runtime)
  .from("player_performance_view")
  .select(`
    id,
    gamertag,
    position,
    player_rank_score,
    player_rp,
    current_team_id,
    team_name,
    games_played,
    avg_points,
    avg_assists,
    avg_rebounds,
    salary_tier
  `);

if (positionFilter !== 'all') {
  dataQuery = dataQuery.eq("position", positionFilter as any);
}

if (tierFilter !== 'all') {
  dataQuery = dataQuery.eq("salary_tier", tierFilter as any);
}

// Apply sorting
if (sortBy === 'rank') {
  dataQuery = dataQuery.order("player_rank_score", { ascending: false });
} else if (sortBy === 'ppg') {
  dataQuery = dataQuery.order("avg_points", { ascending: false });
} else if (sortBy === 'apg') {
  dataQuery = dataQuery.order("avg_assists", { ascending: false });
} else if (sortBy === 'rpg') {
  dataQuery = dataQuery.order("avg_rebounds", { ascending: false });
}

const { data, error } = await dataQuery.range(offset, offset + ITEMS_PER_PAGE - 1);

if (error) console.error(error);
const players = data ?? [];

// Get unique positions for filter
const { data: positionsData } = await supa((Astro.locals as any).runtime)
  .from("player_performance_view")
  .select("position")
  .not("position", "is", null);

const uniquePositions = [...new Set((positionsData ?? []).map((p: any) => p.position))].filter(Boolean).sort();

// Get unique tiers for filter
const { data: tiersData } = await supa((Astro.locals as any).runtime)
  .from("player_performance_view")
  .select("salary_tier")
  .not("salary_tier", "is", null);

const uniqueTiers = [...new Set((tiersData ?? []).map((t: any) => t.salary_tier))].filter(Boolean).sort();

// Generate page numbers
function getPageNumbers(current: number, total: number): number[] {
  const pages: number[] = [];
  if (total <= 7) {
    for (let i = 1; i <= total; i++) pages.push(i);
  } else if (current <= 4) {
    for (let i = 1; i <= 7; i++) pages.push(i);
  } else if (current >= total - 3) {
    for (let i = total - 6; i <= total; i++) pages.push(i);
  } else {
    for (let i = current - 3; i <= current + 3; i++) pages.push(i);
  }
  return pages;
}

const pageNumbers = getPageNumbers(currentPage, totalPages);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Players - Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <div class="mb-6">
        <div class="flex items-center justify-between mb-4">
          <h1 class="text-2xl font-bold">Players</h1>
          <div class="text-sm text-neutral-400">
            Page {currentPage} of {totalPages} • {count || 0} total
          </div>
        </div>

        <!-- Filters -->
        <div class="flex flex-wrap gap-3 mb-4">
          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Position:</label>
            <select 
              id="positionFilter"
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm"
              onchange="window.location.href = updateFilter('position', this.value)"
            >
              <option value="all" selected={positionFilter === 'all'}>All Positions</option>
              {uniquePositions.map((position: string) => (
                <option value={position} selected={positionFilter === position}>{position}</option>
              ))}
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Tier:</label>
            <select 
              id="tierFilter"
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm"
              onchange="window.location.href = updateFilter('tier', this.value)"
            >
              <option value="all" selected={tierFilter === 'all'}>All Tiers</option>
              {uniqueTiers.map((tier: string) => (
                <option value={tier} selected={tierFilter === tier}>{tier}</option>
              ))}
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm text-neutral-400">Sort:</label>
            <select 
              id="sortFilter"
              class="px-3 py-1 rounded bg-neutral-800 border border-neutral-700 text-sm"
              onchange="window.location.href = updateFilter('sort', this.value)"
            >
              <option value="rank" selected={sortBy === 'rank'}>Rank Score</option>
              <option value="ppg" selected={sortBy === 'ppg'}>Points Per Game</option>
              <option value="apg" selected={sortBy === 'apg'}>Assists Per Game</option>
              <option value="rpg" selected={sortBy === 'rpg'}>Rebounds Per Game</option>
            </select>
          </div>

          {(positionFilter !== 'all' || tierFilter !== 'all' || sortBy !== 'rank') && (
            <a 
              href="/players" 
              class="px-3 py-1 rounded bg-neutral-800 hover:bg-neutral-700 transition text-sm"
            >
              Clear Filters
            </a>
          )}
        </div>
      </div>

      <script>
        function updateFilter(param: string, value: string) {
          const url = new URL(window.location.href);
          if (value === 'all' || (param === 'sort' && value === 'rank')) {
            url.searchParams.delete(param);
          } else {
            url.searchParams.set(param, value);
          }
          url.searchParams.delete('page'); // Reset to page 1 when filtering
          return url.toString();
        }
      </script>

      <!-- Players Grid -->
      <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {players.map((player) => (
          <a 
            href={`/players/${player.id}`}
            class="block rounded-lg border border-neutral-800 p-4 hover:border-blue-500 transition"
          >
            <div class="mb-3">
              <div class="flex items-start justify-between gap-2 mb-1">
                <h2 class="font-bold text-lg flex-1">{player.gamertag}</h2>
                {player.salary_tier && (
                  <span class="px-2 py-0.5 rounded text-xs font-bold bg-blue-900 text-blue-300">
                    {player.salary_tier}
                  </span>
                )}
              </div>
              <p class="text-sm text-neutral-400">{player.position || 'Unknown'}</p>
              {player.team_name && (
                <p class="text-xs text-neutral-500 mt-1">{player.team_name}</p>
              )}
            </div>
            
            <dl class="grid grid-cols-3 gap-2 text-sm">
              <div>
                <dt class="text-neutral-400 text-xs">PPG</dt>
                <dd class="font-semibold">{player.avg_points?.toFixed(1) ?? '-'}</dd>
              </div>
              <div>
                <dt class="text-neutral-400 text-xs">APG</dt>
                <dd class="font-semibold">{player.avg_assists?.toFixed(1) ?? '-'}</dd>
              </div>
              <div>
                <dt class="text-neutral-400 text-xs">RPG</dt>
                <dd class="font-semibold">{player.avg_rebounds?.toFixed(1) ?? '-'}</dd>
              </div>
            </dl>
          </a>
        ))}
      </div>

      {players.length === 0 && (
        <div class="text-center py-12 text-neutral-400">
          No players found.
        </div>
      )}

      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="mt-8 flex items-center justify-center gap-2">
          {currentPage > 1 ? (
            <a 
              href={`/players?page=${currentPage - 1}${positionFilter !== 'all' ? `&position=${positionFilter}` : ''}${tierFilter !== 'all' ? `&tier=${tierFilter}` : ''}${sortBy !== 'rank' ? `&sort=${sortBy}` : ''}`}
              class="px-4 py-2 rounded bg-neutral-800 hover:bg-neutral-700 transition"
            >
              ← Previous
            </a>
          ) : (
            <span class="px-4 py-2 rounded bg-neutral-900 text-neutral-600 cursor-not-allowed">
              ← Previous
            </span>
          )}

          <div class="flex gap-1">
            {pageNumbers.map((pageNum: number) => (
              <a
                href={`/players?page=${pageNum}${positionFilter !== 'all' ? `&position=${positionFilter}` : ''}${tierFilter !== 'all' ? `&tier=${tierFilter}` : ''}${sortBy !== 'rank' ? `&sort=${sortBy}` : ''}`}
                class={`px-3 py-2 rounded transition ${
                  pageNum === currentPage
                    ? 'bg-blue-600 text-white font-semibold'
                    : 'bg-neutral-800 hover:bg-neutral-700'
                }`}
              >
                {pageNum}
              </a>
            ))}
          </div>

          {currentPage < totalPages ? (
            <a 
              href={`/players?page=${currentPage + 1}${positionFilter !== 'all' ? `&position=${positionFilter}` : ''}${tierFilter !== 'all' ? `&tier=${tierFilter}` : ''}${sortBy !== 'rank' ? `&sort=${sortBy}` : ''}`}
              class="px-4 py-2 rounded bg-neutral-800 hover:bg-neutral-700 transition"
            >
              Next →
            </a>
          ) : (
            <span class="px-4 py-2 rounded bg-neutral-900 text-neutral-600 cursor-not-allowed">
              Next →
            </span>
          )}
        </div>
      )}
    </main>
  </body>
</html>

