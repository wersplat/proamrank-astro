---
import Navigation from "../../components/Navigation.astro";
import TeamTabsIsland from "../../components/TeamTabsIsland";
import { supa } from "../../lib/supabase";
import "../../styles/global.css";

// Enable SSR for dynamic team pages
export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/teams");
}

// Get team basic info
const { data: teamData } = await supa((Astro.locals as any).runtime)
  .from("teams")
  .select("id, name, logo_url, global_rank, current_rp, elo_rating, hybrid_score, leaderboard_tier")
  .eq("id", id)
  .maybeSingle();

// Get team performance data
const { data: perfData } = await supa((Astro.locals as any).runtime)
  .from("team_performance_view")
  .select("*")
  .eq("team_id", id)
  .maybeSingle();

// Get current roster
const { data: roster } = await supa((Astro.locals as any).runtime)
  .from("team_roster_current")
  .select("*")
  .eq("team_id", id)
  .order("is_captain", { ascending: false });

// Get all matches for the team
const { data: matchesData } = await supa((Astro.locals as any).runtime)
  .from("v_matches_with_primary_context")
  .select("id, played_at, team_a_id, team_b_id, score_a, score_b, winner_id, boxscore_url, status, verified, league_id, season_id, tournament_id, stage")
  .or(`team_a_id.eq.${id},team_b_id.eq.${id}`)
  .order("played_at", { ascending: false });

// Get team info for matches
const matchTeamIds = Array.from(new Set([
  ...(matchesData ?? []).map((m: any) => m.team_a_id),
  ...(matchesData ?? []).map((m: any) => m.team_b_id)
].filter((tid: string) => tid !== id)));

const { data: matchTeamsData } = matchTeamIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("teams")
  .select("id, name, logo_url")
  .in("id", matchTeamIds) : { data: [] };

const matchTeamMap = new Map((matchTeamsData ?? []).map((t: any) => [t.id, t]));

// Get league info for matches (use season_id for accurate season lookup)
const matchSeasonIds = Array.from(new Set((matchesData ?? []).map((m: any) => m.season_id).filter(Boolean)));
const { data: matchLeaguesData } = matchSeasonIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("league_calendar")
  .select("season_id, league_id, league_name, season_number")
  .in("season_id", matchSeasonIds) : { data: [] };

const matchLeagueMap = new Map((matchLeaguesData ?? []).map((l: any) => [l.season_id, l]));

// Get tournament info for matches
const matchTournamentIds = Array.from(new Set((matchesData ?? []).map((m: any) => m.tournament_id).filter(Boolean)));
const { data: matchTournamentsData } = matchTournamentIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("tournaments")
  .select("id, name")
  .in("id", matchTournamentIds) : { data: [] };

const matchTournamentMap = new Map((matchTournamentsData ?? []).map((t: any) => [t.id, t]));

const matches = (matchesData ?? []).map((m: any) => ({
  ...m,
  team_a: m.team_a_id === id ? { name: teamData?.name, logo_url: teamData?.logo_url } : matchTeamMap.get(m.team_a_id),
  team_b: m.team_b_id === id ? { name: teamData?.name, logo_url: teamData?.logo_url } : matchTeamMap.get(m.team_b_id),
  league: matchLeagueMap.get(m.season_id),
  tournament: matchTournamentMap.get(m.tournament_id),
}));

// Get team roster history
const { data: teamHistory } = await supa((Astro.locals as any).runtime)
  .from("team_roster_history")
  .select("player_id, gamertag, position, joined_at, left_at, season_number, league_name, team_logo, team_name, is_captain, is_player_coach, tournament_id, tournament_name")
  .eq("team_id", id)
  .order("joined_at", { ascending: false });

// Get past championships
const { data: championships } = await supa((Astro.locals as any).runtime)
  .from("past_champions")
  .select("*")
  .eq("team_id", id)
  .order("year", { ascending: false });

// Get year-by-year team stats
const { data: yearStats } = await supa((Astro.locals as any).runtime)
  .from("team_performance_by_game_year")
  .select("*")
  .eq("team_id", id)
  .order("game_year", { ascending: false });

const team = teamData;
const performance = perfData;
const players = roster ?? [];
const allMatches = matches;

if (!team) {
  return Astro.redirect("/teams");
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{team.name} - Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <!-- Team Header -->
      <div class="mb-8 flex items-start gap-6">
        <img 
          src={team.logo_url || `${import.meta.env.PUBLIC_ASSETS_BASE || ""}/logos/${team.id}.webp`}
          alt={team.name || "Team"}
          class="h-24 w-24 rounded-lg"
        />
        <div class="flex-1">
          <h1 class="text-3xl font-bold mb-2">{team.name}</h1>
          <div class="flex flex-wrap gap-4 text-sm">
            <div>
              <span class="text-neutral-400">Global Rank:</span>
              <span class="ml-2 font-semibold">#{team.global_rank ?? '-'}</span>
            </div>
            <div>
              <span class="text-neutral-400">Hybrid Score:</span>
              <span class="ml-2 font-semibold">{Math.round(team.hybrid_score ?? 0)}</span>
            </div>
            <div>
              <span class="text-neutral-400">Tier:</span>
              <span class="ml-2 font-semibold">{team.leaderboard_tier || '-'}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Stats Overview -->
      <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-4 mb-8">
        <div class="rounded-lg border border-neutral-800 p-4">
          <div class="text-neutral-400 text-sm mb-1">Elo Rating</div>
          <div class="text-2xl font-bold">{Math.round(performance?.elo_rating ?? team.elo_rating ?? 1500)}</div>
        </div>
        <div class="rounded-lg border border-neutral-800 p-4">
          <div class="text-neutral-400 text-sm mb-1">Ranking Points</div>
          <div class="text-2xl font-bold">{performance?.current_rp ?? team.current_rp ?? 0}</div>
        </div>
        <div class="rounded-lg border border-neutral-800 p-4">
          <div class="text-neutral-400 text-sm mb-1">Win Rate</div>
          <div class="text-2xl font-bold">
            {performance?.win_percentage 
              ? `${Number(performance.win_percentage).toFixed(1)}%` 
              : '-'}
          </div>
        </div>
        <div class="rounded-lg border border-neutral-800 p-4">
          <div class="text-neutral-400 text-sm mb-1">Record</div>
          <div class="text-2xl font-bold">
            {performance?.matches_won ?? 0}-{performance?.matches_lost ?? 0}
          </div>
        </div>
      </div>

      <!-- Verification Info Notice -->
      <div class="mb-6 p-4 rounded-lg border border-blue-500/30 bg-blue-900/10">
        <div class="flex items-start gap-3">
          <svg class="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
          </svg>
          <div class="flex-1">
            <h3 class="text-sm font-semibold text-blue-300 mb-1">About Match Verification</h3>
            <p class="text-sm text-neutral-300">
              Unless a match has the <span class="text-green-300 font-medium">Verified</span> badge, stats were derived from OCR (Optical Character Recognition) and may contain errors. 
              Only verified stats are entered into our statistics tables and affect player ratings. 
              <a href="/ranking-system#verification" class="text-blue-400 hover:text-blue-300 underline">Learn more</a>
            </p>
          </div>
        </div>
      </div>

      <!-- Team Tabs (Roster, Matches, History) -->
      <section>
        <TeamTabsIsland 
          client:load
          teamId={id as string}
          players={players as any}
          matches={allMatches as any}
          teamHistory={teamHistory ?? [] as any}
          championships={championships ?? [] as any}
          yearStats={yearStats ?? [] as any}
        />
      </section>
    </main>
  </body>
</html>

