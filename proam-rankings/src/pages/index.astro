---
import Navigation from "../components/Navigation.astro";
import RankTableIsland from "../components/RankTableIsland";
import { supa } from "../lib/supabase";
import "../styles/global.css";

// Try team_analytics_mart first, fall back to teams table if mart is empty
let data, error;
const { data: martData, error: martError } = await supa(Astro.locals.runtime)
  .from("team_analytics_mart")
  .select(`
    team_id,
    team_name,
    logo_url,
    elo_rating,
    current_rp,
    rp_tier,
    wins,
    losses,
    win_percentage,
    games_played
  `)
  .gte("games_played", 1)
  .order("win_percentage", { ascending: false })
  .order("elo_rating", { ascending: false })
  .limit(100);

// If mart is empty or has error, fall back to teams table
if (!martData || martData.length === 0 || martError) {
  const { data: teamsData, error: teamsError } = await supa(Astro.locals.runtime)
    .from("teams")
    .select(`
      id,
      name,
      logo_url,
      elo_rating,
      current_rp,
      global_rank,
      leaderboard_tier,
      hybrid_score
    `)
    .eq("is_active", true)
    .order("hybrid_score", { ascending: false })
    .limit(100);
  
  data = teamsData;
  error = teamsError;
} else {
  data = martData;
  error = martError;
}

if (error) console.error(error);

// Map to expected format (maintaining compatibility with existing component)
const rows = (data ?? []).map((team: any) => ({
  team_id: team.team_id || team.id,
  team_name: team.team_name || team.name,
  logo_url: team.logo_url,
  elo_rating: team.elo_rating,
  current_rp: team.current_rp,
  global_rank: team.global_rank || null,
  leaderboard_tier: team.rp_tier || team.leaderboard_tier,
  hybrid_score: team.hybrid_score || Math.round((team.win_percentage || 0) * 10 + (team.elo_rating || 1500) / 10),
}));
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <h1 class="text-2xl font-bold mb-4">Global Rankings</h1>

      <!-- Mobile cards (smaller screens) -->
      <section class="space-y-2 sm:hidden">
        {rows.map((r: typeof rows[0]) => (
          <article class="rounded border border-neutral-800 p-3">
            <header class="flex items-center gap-3">
              <img src={r.logo_url || `${import.meta.env.PUBLIC_ASSETS_BASE || ""}/logos/${r.team_id}.webp` }
                   alt="" class="h-8 w-8 rounded" loading="lazy" />
              <div class="font-semibold">{r.team_name}</div>
              {r.leaderboard_tier && (
                <div class="ml-auto text-xs font-bold text-neutral-400">{r.leaderboard_tier}</div>
              )}
            </header>
            <dl class="mt-2 grid grid-cols-3 text-sm">
              <div><dt class="text-neutral-400">Score</dt><dd class="font-medium">{Math.round(r.hybrid_score ?? 0)}</dd></div>
              <div><dt class="text-neutral-400">Elo</dt><dd class="font-medium">{Math.round(r.elo_rating ?? 1500)}</dd></div>
              <div><dt class="text-neutral-400">RP</dt><dd>{r.current_rp ?? 0}</dd></div>
            </dl>
          </article>
        ))}
      </section>

      <!-- Desktop table (hydrated island, optional) -->
      <RankTableIsland client:idle rows={rows} />
    </main>
  </body>
</html>
