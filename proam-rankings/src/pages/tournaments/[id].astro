---
import Navigation from "../../components/Navigation.astro";
import TournamentTabsIsland from "../../components/TournamentTabsIsland";
import { supa } from "../../lib/supabase";
import "../../styles/global.css";

// Enable SSR for dynamic tournament pages
export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/tournaments");
}

// Use tournament_performance_mart for optimized tournament data
const { data: tournamentMartData } = await supa((Astro.locals as any).runtime)
  .from("tournament_performance_mart")
  .select("*")
  .eq("tournament_id", id)
  .maybeSingle();

// Also get organizer details for social media links
const { data: tournamentData } = await supa((Astro.locals as any).runtime)
  .from("tournaments")
  .select(`
    id,
    name,
    banner_url,
    organizer:leagues_info!tournaments_organizer_id_fkey (
      lg_url,
      lg_discord,
      twitch_url,
      twitter_id
    )
  `)
  .eq("id", id)
  .maybeSingle();

// Merge mart data with basic tournament data
const tournament = tournamentMartData ? {
  id: tournamentMartData.tournament_id,
  name: tournamentMartData.tournament_name,
  banner_url: tournamentData?.banner_url,
  game_year: tournamentMartData.game_year,
  start_date: tournamentMartData.start_date,
  end_date: tournamentMartData.end_date,
  status: tournamentMartData.status,
  prize_pool: tournamentMartData.prize_pool,
  max_rp: tournamentMartData.max_rp,
  tier: tournamentMartData.tournament_tier,
  organizer: tournamentData?.organizer,
} : null;

if (!tournament) {
  return Astro.redirect("/tournaments");
}

// Use tier from tournament_performance_mart
const tournamentTier = tournamentMartData?.tournament_tier || null;

// Get tournament results
const { data: results } = await supa((Astro.locals as any).runtime)
  .from("tournament_results")
  .select("*")
  .eq("tournament_id", id)
  .order("final_placement", { ascending: true });

// Get all teams registered for the tournament (from rosters)
const { data: registeredTeamsRaw } = await supa((Astro.locals as any).runtime)
  .from("tournament_team_rosters")
  .select("team_id, team_name, team_logo")
  .eq("tournament_id", id);

// Get unique team IDs from both results and rosters
const uniqueRegisteredTeams = Array.from(
  new Map((registeredTeamsRaw ?? []).map((t: any) => [t.team_id, t])).values()
);

const allTeamIds = Array.from(new Set([
  ...(results ?? []).map((s: any) => s.team_id),
  ...uniqueRegisteredTeams.map((t: any) => t.team_id)
].filter(Boolean)));

// Fetch global team data for all teams
let teamsWithData: any[] = [];
if (allTeamIds.length > 0) {
  const { data: teamsData } = await supa((Astro.locals as any).runtime)
    .from("teams")
    .select("id, name, logo_url, global_rank, hybrid_score, leaderboard_tier")
    .in("id", allTeamIds);
  
  // Create a map for quick lookup
  const teamsDataMap = new Map((teamsData ?? []).map((t: any) => [t.id, t]));
  const resultsMap = new Map((results ?? []).map((r: any) => [r.team_id, r]));
  
  // Merge all data - prioritize teams with results, then add registered teams without results
  teamsWithData = allTeamIds.map((teamId: string) => {
    const teamData = teamsDataMap.get(teamId);
    const resultData = resultsMap.get(teamId);
    const rosterData = uniqueRegisteredTeams.find((t: any) => t.team_id === teamId);
    
    return {
      team_id: teamId,
      team_name: teamData?.name || rosterData?.team_name || resultData?.team_name || 'Unknown',
      logo_url: teamData?.logo_url || rosterData?.team_logo || resultData?.logo_url,
      // Results data from tournament_results view (by UUID)
      final_placement: resultData?.final_placement,
      wins: resultData?.wins,
      losses: resultData?.losses,
      win_percentage: resultData?.win_percentage,
      points_for: resultData?.points_for,
      points_against: resultData?.points_against,
      point_differential: resultData?.point_differential,
      current_rp: resultData?.current_rp,
      prize_won: resultData?.prize_won,
      // Global team data
      teams: teamData ? {
        global_rank: teamData.global_rank,
        hybrid_score: teamData.hybrid_score,
        leaderboard_tier: teamData.leaderboard_tier
      } : null
    };
  });
}

// Get tournament matches (limit to 1000 for performance)
// Use primary_tournament_id to include matches added via match_contexts
const { data: matchesData } = await supa((Astro.locals as any).runtime)
  .from("v_matches_with_primary_context")
  .select("id, played_at, team_a_id, team_b_id, score_a, score_b, stage, boxscore_url, status, verified, league_id, season_id, tournament_id, primary_tournament_id")
  .eq("primary_tournament_id", id)
  .order("played_at", { ascending: false })
  .limit(1000);

// Get the last match update time for the notice
const lastMatchUpdate = matchesData && matchesData.length > 0 ? matchesData[0].played_at : null;

// Get team info for matches
const matchTeamIds = Array.from(new Set([
  ...(matchesData ?? []).map((m: any) => m.team_a_id),
  ...(matchesData ?? []).map((m: any) => m.team_b_id)
].filter(Boolean)));

const { data: matchTeamsData } = matchTeamIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("teams")
  .select("id, name, logo_url")
  .in("id", matchTeamIds) : { data: [] };

const matchTeamMap = new Map((matchTeamsData ?? []).map((t: any) => [t.id, t]));

// Get tournament info (for the badge)
const { data: tournamentInfo } = await supa((Astro.locals as any).runtime)
  .from("tournaments")
  .select("id, name")
  .eq("id", id)
  .maybeSingle();

const matches = (matchesData ?? []).map((m: any) => ({
  ...m,
  team_a: matchTeamMap.get(m.team_a_id),
  team_b: matchTeamMap.get(m.team_b_id),
  tournament: tournamentInfo,
}));

// Get player statistics from pre-calculated view
const { data: playerStats } = await supa((Astro.locals as any).runtime)
  .from("tournament_player_stats")
  .select("gamertag, avg_points, avg_assists, avg_rebounds, avg_steals, avg_blocks, games_played")
  .eq("tournament_id", id)
  .gte("games_played", 3);

const topScorers = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_points - a.avg_points)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.gamertag,
    points_per_game: p.avg_points,
    games_played: p.games_played
  }));

const topAssists = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_assists - a.avg_assists)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.gamertag,
    assists_per_game: p.avg_assists,
    games_played: p.games_played
  }));

const topRebounders = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_rebounds - a.avg_rebounds)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.gamertag,
    rebounds_per_game: p.avg_rebounds,
    games_played: p.games_played
  }));

const topSteals = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_steals - a.avg_steals)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.gamertag,
    steals_per_game: p.avg_steals,
    games_played: p.games_played
  }));

const topBlocks = (playerStats ?? [])
  .sort((a: any, b: any) => b.avg_blocks - a.avg_blocks)
  .slice(0, 5)
  .map((p: any) => ({
    player_name: p.gamertag,
    blocks_per_game: p.avg_blocks,
    games_played: p.games_played
  }));

// Get full player statistics for tournament statistics tab
const { data: fullPlayerStats } = await supa((Astro.locals as any).runtime)
  .from("tournament_player_stats")
  .select("*")
  .eq("tournament_id", id)
  .gte("games_played", 1)
  .order("avg_points", { ascending: false });

const tournamentResults = teamsWithData ?? [];
const recentMatches = matches ?? [];

// Prepare tournament info object for tabs
const tournamentInfoForTabs = {
  tournament_name: tournament.name,
  tier: tournamentTier,
  game_year: tournament.game_year,
  start_date: tournament.start_date,
  end_date: tournament.end_date,
  status: tournament.status,
  prize_pool: tournament.prize_pool,
  max_rp: tournament.max_rp,
  lg_url: tournament.organizer?.lg_url,
  lg_discord: tournament.organizer?.lg_discord,
  twitch_url: tournament.organizer?.twitch_url,
  twitter_id: tournament.organizer?.twitter_id,
};

const tierColors: Record<string, string> = {
  'T1': 'bg-purple-900 text-purple-300 border-purple-500',
  'T2': 'bg-blue-900 text-blue-300 border-blue-500',
  'T3': 'bg-green-900 text-green-300 border-green-500',
  'T4': 'bg-yellow-900 text-yellow-300 border-yellow-500',
  'T5': 'bg-gray-900 text-gray-300 border-gray-500',
};
const tierColor = tierColors[tournamentTier as string] || 'bg-gray-900 text-gray-300 border-gray-500';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{tournament.name} - Pro-Am Rankings</title>
  </head>
  <body class="bg-brand-navy text-white">
    <Navigation />
    <main class="mx-auto max-w-6xl p-6">
      <!-- Tournament Header -->
      <div class="mb-8">
        {tournament.banner_url && (
          <img 
            src={tournament.banner_url}
            alt={tournament.name || "Tournament"}
            class="w-full h-48 object-cover rounded-lg mb-4"
          />
        )}
        <h1 class="text-3xl font-bold mb-2">{tournament.name}</h1>
        <div class="flex flex-wrap gap-3 items-center mb-3">
          <span class={`px-3 py-1 rounded text-sm font-bold border ${tierColor}`}>
            {tournamentTier} Tier
          </span>
          <span class="text-neutral-400 text-sm">
            {tournament.game_year ?? '-'}
          </span>
          {tournament.status && (
            <span class="text-neutral-400 text-sm">• {tournament.status}</span>
          )}
        </div>
        
        <!-- Quick Stats -->
        <div class="flex flex-wrap gap-4 text-sm mb-4">
          {tournament.prize_pool && (
            <div>
              <span class="text-neutral-400">Prize Pool:</span>
              <span class="ml-2 font-semibold text-green-400">${tournament.prize_pool.toLocaleString()}</span>
            </div>
          )}
          {tournament.max_rp && (
            <div>
              <span class="text-neutral-400">Max RP:</span>
              <span class="ml-2 font-semibold text-yellow-400">{tournament.max_rp}</span>
            </div>
          )}
          {tournament.start_date && (
            <div>
              <span class="text-neutral-400">Start:</span>
              <span class="ml-2 font-semibold">{new Date(tournament.start_date).toLocaleDateString()}</span>
            </div>
          )}
          {tournament.end_date && (
            <div>
              <span class="text-neutral-400">End:</span>
              <span class="ml-2 font-semibold">{new Date(tournament.end_date).toLocaleDateString()}</span>
            </div>
          )}
        </div>

        <!-- Social Media Links -->
        {tournament.organizer && (
          <div class="flex flex-wrap gap-2 text-sm">
            {tournament.organizer.lg_url && (
              <a href={tournament.organizer.lg_url} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-neutral-800 hover:bg-neutral-700 transition">
                🌐 Website
              </a>
            )}
            {tournament.organizer.lg_discord && (
              <a href={tournament.organizer.lg_discord} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-indigo-900 hover:bg-indigo-800 transition">
                💬 Discord
              </a>
            )}
            {tournament.organizer.twitch_url && (
              <a href={tournament.organizer.twitch_url} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-purple-900 hover:bg-purple-800 transition">
                📺 Twitch
              </a>
            )}
            {tournament.organizer.twitter_id && (
              <a href={`https://twitter.com/${tournament.organizer.twitter_id}`} target="_blank" rel="noopener noreferrer" class="px-3 py-1 rounded bg-sky-900 hover:bg-sky-800 transition">
                🐦 Twitter
              </a>
            )}
          </div>
        )}
      </div>

      <!-- Last Updated Notice -->
      {lastMatchUpdate && (
        <div class="mb-4 p-3 rounded-lg border border-neutral-700 bg-neutral-800/50">
          <div class="flex items-center gap-2 text-sm text-neutral-300">
            <svg class="w-4 h-4 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>
              Last match: <span class="font-medium text-white">{new Date(lastMatchUpdate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}</span>
            </span>
          </div>
        </div>
      )}

      <!-- Verification Info Notice -->
      <div class="mb-6 p-4 rounded-lg border border-blue-500/30 bg-blue-900/10">
        <div class="flex items-start gap-3">
          <svg class="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
          </svg>
          <div class="flex-1">
            <h3 class="text-sm font-semibold text-blue-300 mb-1">About Match Verification</h3>
            <p class="text-sm text-neutral-300">
              Unless a match has the <span class="text-green-300 font-medium">Verified</span> badge, stats were derived from OCR (Optical Character Recognition) and may contain errors. 
              Only verified stats are entered into our statistics tables and affect player ratings. 
              <a href="/ranking-system#verification" class="text-blue-400 hover:text-blue-300 underline">Learn more</a>
            </p>
          </div>
        </div>
      </div>

      <!-- Tournament Tabs -->
      <TournamentTabsIsland 
        client:load
        standings={tournamentResults as any}
        matches={recentMatches as any}
        topScorers={topScorers as any}
        topAssists={topAssists as any}
        topRebounders={topRebounders as any}
        topSteals={topSteals as any}
        topBlocks={topBlocks as any}
        tournamentInfo={tournamentInfoForTabs as any}
        playerStats={fullPlayerStats as any}
      />
    </main>
  </body>
</html>

