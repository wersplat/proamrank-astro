---
import Navigation from "../components/Navigation.astro";
import "../styles/global.css";
const base = import.meta.env.PUBLIC_ASSETS_BASE || "";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Upload Screenshot - Pro-Am Rankings</title>
  </head>
  <body class="bg-neutral-950 text-white">
    <Navigation />
    <main class="mx-auto max-w-xl p-6">
      <h1 class="text-2xl font-bold mb-4">Upload Box Score Screenshot</h1>

      <form id="uploadForm" class="space-y-3">
        <input 
          name="file" 
          type="file" 
          accept="image/*" 
          capture="environment" 
          class="block w-full text-sm text-neutral-400 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-blue-600 file:text-white hover:file:bg-blue-500" 
          required 
        />
        <input 
          name="gameId" 
          type="text" 
          placeholder="Game ID (UUID or slug)" 
          class="w-full bg-neutral-900 border border-neutral-800 p-2 rounded text-white" 
          required 
        />
        <button type="submit" class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded font-medium">
          Upload
        </button>
      </form>

      <progress id="progressBar" value="0" max="100" class="w-full mt-3 hidden"></progress>
      <pre id="output" class="text-xs text-neutral-400 mt-4 whitespace-pre-wrap"></pre>
    </main>

    <script define:vars={{ baseUrl: base }}>
      const form = document.getElementById('uploadForm');
      const progressBar = document.getElementById('progressBar');
      const output = document.getElementById('output');

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.currentTarget);
        const file = formData.get('file');
        const gameId = (formData.get('gameId') || '').toString().trim();
        
        if (!(file instanceof File)) {
          output.textContent = 'Please select a file';
          return;
        }

        const randomId = crypto.randomUUID();
        const key = '2K26/boxscores/' + gameId + '/' + randomId + '.webp';
        const uploadUrl = '/api/upload-direct?key=' + encodeURIComponent(key);

        const xhr = new XMLHttpRequest();
        xhr.open('PUT', uploadUrl);
        xhr.setRequestHeader('Content-Type', file.type);
        
        xhr.upload.onprogress = (event) => {
          if (!event.lengthComputable) return;
          progressBar.classList.remove('hidden');
          progressBar.value = Math.round((event.loaded / event.total) * 100);
        };
        
        xhr.onload = () => {
          if (xhr.status === 200) {
            const fullUrl = baseUrl ? baseUrl + '/' + key : key;
            output.textContent = 'Upload successful!\nURL: ' + fullUrl;
          } else {
            output.textContent = 'Upload failed (status: ' + xhr.status + ')';
          }
        };
        
        xhr.onerror = () => {
          output.textContent = 'Network error occurred';
        };
        
        xhr.send(file);
      });
    </script>
  </body>
</html>
