---
import { supa } from "../lib/supabase";

// Get tournament ID from URL params
const tournamentId = Astro.url.searchParams.get('id');

if (!tournamentId) {
  return new Response('Missing tournament ID parameter', { status: 400 });
}

// Get tournament info
const { data: tournamentData } = await supa((Astro.locals as any).runtime)
  .from("tournaments")
  .select("*")
  .eq("id", tournamentId)
  .maybeSingle();

// Get matches for this tournament
const { data: matchesData } = await supa((Astro.locals as any).runtime)
  .from("v_matches_with_primary_context")
  .select("id, played_at, team_a_id, team_b_id, score_a, score_b, stage, boxscore_url, status, verified, league_id, season_id, tournament_id, primary_tournament_id")
  .eq("primary_tournament_id", tournamentId)
  .order("played_at", { ascending: false })
  .limit(1000);

// Get team data for matches
const matchTeamIds = Array.from(new Set([
  ...(matchesData ?? []).map((m: any) => m.team_a_id),
  ...(matchesData ?? []).map((m: any) => m.team_b_id)
].filter(Boolean)));

const { data: matchTeamsData } = matchTeamIds.length > 0 ? await supa((Astro.locals as any).runtime)
  .from("teams")
  .select("id, name, logo_url")
  .in("id", matchTeamIds) : { data: [] };

const matchTeamMap = new Map((matchTeamsData ?? []).map((t: any) => [t.id, t]));

// Process matches
const matches = (matchesData ?? []).map((m: any) => ({
  ...m,
  team_a: matchTeamMap.get(m.team_a_id),
  team_b: matchTeamMap.get(m.team_b_id),
}));

// Analyze bracket matches
const bracketMatches = matches.filter(m => m.stage && m.stage !== "Regular Season");
const stages = [...new Set(bracketMatches.map(m => m.stage))];

// Check if this might be a league tournament
const { data: leagueOpenData } = await supa((Astro.locals as any).runtime)
  .from("league_open")
  .select("season_id, open_champion, status")
  .or(`open_champion.ilike.%${tournamentData?.name || ''}%,season_id.eq.${tournamentId}`)
  .limit(5);

const { data: leaguePlayoffData } = await supa((Astro.locals as any).runtime)
  .from("league_playoff")
  .select("season_id, playoff_champion, status")
  .or(`playoff_champion.ilike.%${tournamentData?.name || ''}%,season_id.eq.${tournamentId}`)
  .limit(5);
---

<html>
<head>
  <title>Tournament Debug - {tournamentData?.name || 'Unknown'}</title>
  <style>
    body { font-family: monospace; background: #1a1a1a; color: #fff; padding: 20px; }
    .section { margin: 20px 0; padding: 15px; border: 1px solid #333; border-radius: 5px; }
    .error { color: #ff6b6b; }
    .success { color: #51cf66; }
    .warning { color: #ffd43b; }
    .info { color: #74c0fc; }
    pre { background: #2d2d2d; padding: 10px; border-radius: 3px; overflow-x: auto; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #333; padding: 8px; text-align: left; }
    th { background: #333; }
  </style>
</head>
<body>
  <h1>Tournament Debug Tool</h1>
  
  <div class="section">
    <h2>Tournament Info</h2>
    {tournamentData ? (
      <pre>{JSON.stringify(tournamentData, null, 2)}</pre>
    ) : (
      <p class="error">Tournament not found with ID: {tournamentId}</p>
    )}
  </div>

  <div class="section">
    <h2>Match Analysis</h2>
    <p><strong>Total matches:</strong> {matches.length}</p>
    <p><strong>Bracket matches:</strong> {bracketMatches.length}</p>
    <p><strong>Stages found:</strong> {stages.join(', ') || 'None'}</p>
    
    {matches.length === 0 ? (
      <p class="error">‚ùå No matches found for this tournament!</p>
    ) : bracketMatches.length === 0 ? (
      <p class="warning">‚ö†Ô∏è Matches found but none are bracket matches (all marked as Regular Season)</p>
    ) : (
      <p class="success">‚úÖ Bracket matches found - bracket should display</p>
    )}
  </div>

  <div class="section">
    <h2>Potential Issues</h2>
    {matches.length === 0 ? (
      <div>
        <p class="error">üîç Possible causes:</p>
        <ul>
          <li>Tournament ID is incorrect</li>
          <li>Matches are not linked via primary_tournament_id</li>
          <li>This might be a league tournament (check league pages instead)</li>
        </ul>
      </div>
    ) : bracketMatches.length === 0 ? (
      <div>
        <p class="warning">üîç This might be a league tournament:</p>
        <ul>
          <li>All matches are marked as "Regular Season"</li>
          <li>League tournaments use league_open_matches/league_playoff_matches tables</li>
          <li>Check the league page for brackets instead</li>
        </ul>
      </div>
    ) : (
      <p class="success">‚úÖ Bracket data looks good - check component logic</p>
    )}
  </div>

  {leagueOpenData && leagueOpenData.length > 0 && (
    <div class="section">
      <h2>Possible League Open Tournament Matches</h2>
      <p class="info">Found {leagueOpenData.length} potential league open tournament(s):</p>
      <pre>{JSON.stringify(leagueOpenData, null, 2)}</pre>
    </div>
  )}

  {leaguePlayoffData && leaguePlayoffData.length > 0 && (
    <div class="section">
      <h2>Possible League Playoff Tournament Matches</h2>
      <p class="info">Found {leaguePlayoffData.length} potential league playoff tournament(s):</p>
      <pre>{JSON.stringify(leaguePlayoffData, null, 2)}</pre>
    </div>
  )}

  <div class="section">
    <h2>Sample Matches</h2>
    {matches.length > 0 ? (
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Team A</th>
            <th>Team B</th>
            <th>Score</th>
            <th>Stage</th>
            <th>Type</th>
          </tr>
        </thead>
        <tbody>
          {matches.slice(0, 10).map((match: any) => (
            <tr>
              <td>{new Date(match.played_at).toLocaleDateString()}</td>
              <td>{match.team_a?.name || match.team_a_id}</td>
              <td>{match.team_b?.name || match.team_b_id}</td>
              <td>{match.score_a} - {match.score_b}</td>
              <td>{match.stage || 'N/A'}</td>
              <td>{match.stage === 'Regular Season' ? 'Regular' : 'Bracket'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    ) : (
      <p class="error">No matches to display</p>
    )}
  </div>

  <div class="section">
    <h2>Quick Fixes</h2>
    <ul>
      <li><strong>If no matches:</strong> Check if this is the correct tournament ID</li>
      <li><strong>If all Regular Season:</strong> This is likely a league tournament - check league pages</li>
      <li><strong>If bracket matches exist:</strong> The issue is in the component logic</li>
    </ul>
  </div>
</body>
</html>
